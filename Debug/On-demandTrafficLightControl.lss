
On-demandTrafficLightControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000013bc  2**0
                  ALLOC
  2 .stab         00002994  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d96  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_1>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 36       	cpi	r26, 0x63	; 99
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 8f 09 	call	0x131e	; 0x131e <main>
      74:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MTMR0_VOIDCTCInit>:
 * Return value: En_TIMERState_t - The state of the function
 * Description: Function to initialize timer 0 in CTC mode
 ************************************************************************************/

En_TIMERState_t MTMR0_VOIDCTCInit (void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	0f 92       	push	r0
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
	En_TIMERState_t LOC_ENState= TIMER_NOT_OK;
      86:	81 e0       	ldi	r24, 0x01	; 1
      88:	89 83       	std	Y+1, r24	; 0x01
	/*Select CTC mode*/
	SET_BIT(TCCR0_REG,WGM01);
      8a:	a3 e5       	ldi	r26, 0x53	; 83
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	e3 e5       	ldi	r30, 0x53	; 83
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	80 81       	ld	r24, Z
      94:	80 64       	ori	r24, 0x40	; 64
      96:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM00);
      98:	a3 e5       	ldi	r26, 0x53	; 83
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e3 e5       	ldi	r30, 0x53	; 83
      9e:	f0 e0       	ldi	r31, 0x00	; 0
      a0:	80 81       	ld	r24, Z
      a2:	87 7f       	andi	r24, 0xF7	; 247
      a4:	8c 93       	st	X, r24
	/*Select Normal port operation mode*/
	CLR_BIT(TCCR0_REG,COMM01);
      a6:	a3 e5       	ldi	r26, 0x53	; 83
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	e3 e5       	ldi	r30, 0x53	; 83
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	8f 7d       	andi	r24, 0xDF	; 223
      b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,COMM00);
      b4:	a3 e5       	ldi	r26, 0x53	; 83
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e3 e5       	ldi	r30, 0x53	; 83
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	8f 7e       	andi	r24, 0xEF	; 239
      c0:	8c 93       	st	X, r24
	LOC_ENState = TIMER_OK;
      c2:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
      c4:	89 81       	ldd	r24, Y+1	; 0x01
}
      c6:	0f 90       	pop	r0
      c8:	cf 91       	pop	r28
      ca:	df 91       	pop	r29
      cc:	08 95       	ret

000000ce <MTMR0_VOIDCTCStart>:
 * Return value: En_TIMERState_t - The state of the function
 * Description: Function to start the timer is complete, maximum number of seconds = 262s
 ************************************************************************************/

En_TIMERState_t MTMR0_VOIDCTCStart (uint16_t Copy_U16Time)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <MTMR0_VOIDCTCStart+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <MTMR0_VOIDCTCStart+0x8>
      d6:	0f 92       	push	r0
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9d 83       	std	Y+5, r25	; 0x05
      de:	8c 83       	std	Y+4, r24	; 0x04
	/*Variable to store the state of the function*/
		En_TIMERState_t LOC_ENState= TIMER_NOT_OK;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	8b 83       	std	Y+3, r24	; 0x03
		if (Copy_U16Time > MAXIMUM_SECONDS_NUMBER)
      e4:	8c 81       	ldd	r24, Y+4	; 0x04
      e6:	9d 81       	ldd	r25, Y+5	; 0x05
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	87 30       	cpi	r24, 0x07	; 7
      ec:	92 07       	cpc	r25, r18
      ee:	18 f0       	brcs	.+6      	; 0xf6 <MTMR0_VOIDCTCStart+0x28>
		{
			LOC_ENState = TIMER_NOT_OK;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	8b 83       	std	Y+3, r24	; 0x03
      f4:	59 c0       	rjmp	.+178    	; 0x1a8 <MTMR0_VOIDCTCStart+0xda>
		}
		else
		{
			/*Variable to iterate on*/
			uint16_t LOC_U16Complete=ZERO;
      f6:	1a 82       	std	Y+2, r1	; 0x02
      f8:	19 82       	std	Y+1, r1	; 0x01
			 *as the Required time = Copy_U8Second sec -> Counter * 2= Copy_U8Second/(4ms)= Copy_U8Second * 250
			 *Complete_VALUE = Copy_U8Second * 125
			 *Exit when we reach the required time
			 */
			/*Selecting the value 125 to be compared with the timer counter*/
			OCR0_REG = OCR0_REG_VALUE;
      fa:	ec e5       	ldi	r30, 0x5C	; 92
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	8d e7       	ldi	r24, 0x7D	; 125
     100:	80 83       	st	Z, r24
			/*Select pre-scaler value = /256  --> Timer Start Counting*/
			SET_BIT(TCCR0_REG,CS02);
     102:	a3 e5       	ldi	r26, 0x53	; 83
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e3 e5       	ldi	r30, 0x53	; 83
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	84 60       	ori	r24, 0x04	; 4
     10e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,CS01);
     110:	a3 e5       	ldi	r26, 0x53	; 83
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e3 e5       	ldi	r30, 0x53	; 83
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8d 7f       	andi	r24, 0xFD	; 253
     11c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,CS00);
     11e:	a3 e5       	ldi	r26, 0x53	; 83
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e3 e5       	ldi	r30, 0x53	; 83
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8e 7f       	andi	r24, 0xFE	; 254
     12a:	8c 93       	st	X, r24
     12c:	16 c0       	rjmp	.+44     	; 0x15a <MTMR0_VOIDCTCStart+0x8c>
			while (LOC_U16Complete != (COUNTER_VALUE * Copy_U16Time))
			{
				while (GET_BIT(TIFR_REG,OCF0) == ZERO)
     12e:	e8 e5       	ldi	r30, 0x58	; 88
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	86 95       	lsr	r24
     136:	88 2f       	mov	r24, r24
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	81 70       	andi	r24, 0x01	; 1
     13c:	90 70       	andi	r25, 0x00	; 0
     13e:	00 97       	sbiw	r24, 0x00	; 0
     140:	b1 f3       	breq	.-20     	; 0x12e <MTMR0_VOIDCTCStart+0x60>
				{
					/*Do Nothing -> wait for the compare match*/
				}
				/*Clear the flag manually*/
				SET_BIT(TIFR_REG,OCF0);
     142:	a8 e5       	ldi	r26, 0x58	; 88
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e8 e5       	ldi	r30, 0x58	; 88
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	82 60       	ori	r24, 0x02	; 2
     14e:	8c 93       	st	X, r24
				LOC_U16Complete++;
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	9a 81       	ldd	r25, Y+2	; 0x02
     154:	01 96       	adiw	r24, 0x01	; 1
     156:	9a 83       	std	Y+2, r25	; 0x02
     158:	89 83       	std	Y+1, r24	; 0x01
			OCR0_REG = OCR0_REG_VALUE;
			/*Select pre-scaler value = /256  --> Timer Start Counting*/
			SET_BIT(TCCR0_REG,CS02);
			CLR_BIT(TCCR0_REG,CS01);
			CLR_BIT(TCCR0_REG,CS00);
			while (LOC_U16Complete != (COUNTER_VALUE * Copy_U16Time))
     15a:	2c 81       	ldd	r18, Y+4	; 0x04
     15c:	3d 81       	ldd	r19, Y+5	; 0x05
     15e:	8d e7       	ldi	r24, 0x7D	; 125
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	a9 01       	movw	r20, r18
     164:	48 9f       	mul	r20, r24
     166:	90 01       	movw	r18, r0
     168:	49 9f       	mul	r20, r25
     16a:	30 0d       	add	r19, r0
     16c:	58 9f       	mul	r21, r24
     16e:	30 0d       	add	r19, r0
     170:	11 24       	eor	r1, r1
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	c9 f6       	brne	.-78     	; 0x12e <MTMR0_VOIDCTCStart+0x60>
				}
				/*Clear the flag manually*/
				SET_BIT(TIFR_REG,OCF0);
				LOC_U16Complete++;
			}
			if (LOC_U16Complete == (COUNTER_VALUE * Copy_U16Time))
     17c:	2c 81       	ldd	r18, Y+4	; 0x04
     17e:	3d 81       	ldd	r19, Y+5	; 0x05
     180:	8d e7       	ldi	r24, 0x7D	; 125
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	48 9f       	mul	r20, r24
     188:	90 01       	movw	r18, r0
     18a:	49 9f       	mul	r20, r25
     18c:	30 0d       	add	r19, r0
     18e:	58 9f       	mul	r21, r24
     190:	30 0d       	add	r19, r0
     192:	11 24       	eor	r1, r1
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	28 17       	cp	r18, r24
     19a:	39 07       	cpc	r19, r25
     19c:	19 f4       	brne	.+6      	; 0x1a4 <MTMR0_VOIDCTCStart+0xd6>
			{
				LOC_ENState=TIMER_COMPLETE;
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	8b 83       	std	Y+3, r24	; 0x03
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <MTMR0_VOIDCTCStart+0xda>
			}
			else
			{
				LOC_ENState = TIMER_NOT_COMPLETE;
     1a4:	83 e0       	ldi	r24, 0x03	; 3
     1a6:	8b 83       	std	Y+3, r24	; 0x03
			}
		}
		return LOC_ENState;
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	cf 91       	pop	r28
     1b6:	df 91       	pop	r29
     1b8:	08 95       	ret

000001ba <MEXINT_VOIDGIEEnable>:
 * Return value: En_EXINTState_t - The state of the function
 * Description: Function to enable the general interrupts
 ************************************************************************************/

En_EXINTState_t MEXINT_VOIDGIEEnable (void)
{
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	0f 92       	push	r0
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
	/*Local variable to store the state of the function*/
	En_EXINTState_t LOC_ENState = EXINT_NOT_OK;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	89 83       	std	Y+1, r24	; 0x01
	/*Set the I-Bit (Bit: 7) in SREG register to 1 to enable General Interrupts*/
	SET_BIT(SREG_REG,I_BIT);
     1c8:	af e5       	ldi	r26, 0x5F	; 95
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	ef e5       	ldi	r30, 0x5F	; 95
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 68       	ori	r24, 0x80	; 128
     1d4:	8c 93       	st	X, r24
	LOC_ENState = EXINT_OK;
     1d6:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
}
     1da:	0f 90       	pop	r0
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	08 95       	ret

000001e2 <MEXINT_VOIDGIEDisable>:
 * Return value: En_EXINTState_t - The state of the function
 * Description: Function to disable the general interrupts
 ************************************************************************************/

En_EXINTState_t MEXINT_VOIDGIEDisable (void)
{
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	0f 92       	push	r0
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
	/*Local variable to store the state of the function*/
	En_EXINTState_t LOC_ENState = EXINT_NOT_OK;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	89 83       	std	Y+1, r24	; 0x01
	/*Clear the I-Bit (Bit: 7) in SREG register to 1 to disable General Interrupts*/
	CLR_BIT(SREG_REG,I_BIT);
     1f0:	af e5       	ldi	r26, 0x5F	; 95
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	ef e5       	ldi	r30, 0x5F	; 95
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	8f 77       	andi	r24, 0x7F	; 127
     1fc:	8c 93       	st	X, r24
	LOC_ENState = EXINT_OK;
     1fe:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
     200:	89 81       	ldd	r24, Y+1	; 0x01
}
     202:	0f 90       	pop	r0
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <MEXINT0_VOIDInit>:
 * Return value: En_EXINTState_t - The state of the function
 * Description: Function to initialize the interrupts on INT0
 ************************************************************************************/

En_EXINTState_t MEXINT0_VOIDInit (void)
{
     20a:	df 93       	push	r29
     20c:	cf 93       	push	r28
     20e:	0f 92       	push	r0
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
	/*Local variable to store the state of the function*/
	En_EXINTState_t LOC_ENState = EXINT_NOT_OK;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	89 83       	std	Y+1, r24	; 0x01
	/*Setting ISC01 ISC00 bits to 11 to enable the interrupt sense on the rising edge*/
	SET_BIT(MCUCR_REG,ISC01);
     218:	a5 e5       	ldi	r26, 0x55	; 85
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e5 e5       	ldi	r30, 0x55	; 85
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	82 60       	ori	r24, 0x02	; 2
     224:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,ISC00);
     226:	a5 e5       	ldi	r26, 0x55	; 85
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	e5 e5       	ldi	r30, 0x55	; 85
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	81 60       	ori	r24, 0x01	; 1
     232:	8c 93       	st	X, r24
	LOC_ENState = EXINT_OK;
     234:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
     236:	89 81       	ldd	r24, Y+1	; 0x01
}
     238:	0f 90       	pop	r0
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <MEXINT0_VOIDEnableInt>:
 * Return value: En_EXINTState_t - The state of the function
 * Description: Function to enable the interrupt on INT0
 ************************************************************************************/

En_EXINTState_t MEXINT0_VOIDEnableInt (void)
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	0f 92       	push	r0
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
	/*Local variable to store the state of the function*/
	En_EXINTState_t LOC_ENState = EXINT_NOT_OK;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable the General Interrupts*/
	MEXINT_VOIDGIEEnable();
     24e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MEXINT_VOIDGIEEnable>
	/*Enable interrupt on INT0 by setting the INT0 bit in GICR register*/
	SET_BIT(GICR_REG,INT0);
     252:	ab e5       	ldi	r26, 0x5B	; 91
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	eb e5       	ldi	r30, 0x5B	; 91
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	8c 93       	st	X, r24
	LOC_ENState = EXINT_OK;
     260:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
     262:	89 81       	ldd	r24, Y+1	; 0x01
}
     264:	0f 90       	pop	r0
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	08 95       	ret

0000026c <MEXINT0_VOIDDisableInt>:
 * Return value: En_EXINTState_t - The state of the function
 * Description: Function to disable the interrupt on INT0
 ************************************************************************************/

En_EXINTState_t MEXINT0_VOIDDisableInt (void)
{
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	0f 92       	push	r0
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
	/*Local variable to store the state of the function*/
	En_EXINTState_t LOC_ENState = EXINT_NOT_OK;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	89 83       	std	Y+1, r24	; 0x01
	/*Enable the General Interrupts*/
	MEXINT_VOIDGIEDisable();
     27a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <MEXINT_VOIDGIEDisable>
	/*Disable interrupt on INT0 by clearing the INT0 bit in GICR register*/
	CLR_BIT(GICR_REG,INT0);
     27e:	ab e5       	ldi	r26, 0x5B	; 91
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	eb e5       	ldi	r30, 0x5B	; 91
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8f 7b       	andi	r24, 0xBF	; 191
     28a:	8c 93       	st	X, r24
	LOC_ENState = EXINT_OK;
     28c:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
}
     290:	0f 90       	pop	r0
     292:	cf 91       	pop	r28
     294:	df 91       	pop	r29
     296:	08 95       	ret

00000298 <__vector_1>:
 * Return value: None
 * Description: ISR of INT0
 ************************************************************************************/

void __vector_1 (void)
{
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	2f 93       	push	r18
     2a4:	3f 93       	push	r19
     2a6:	4f 93       	push	r20
     2a8:	5f 93       	push	r21
     2aa:	6f 93       	push	r22
     2ac:	7f 93       	push	r23
     2ae:	8f 93       	push	r24
     2b0:	9f 93       	push	r25
     2b2:	af 93       	push	r26
     2b4:	bf 93       	push	r27
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
	/*Calling the function through the callback pointer*/
	GLOB_VOIDINT0CallBackPtr();
     2c2:	e0 91 60 00 	lds	r30, 0x0060
     2c6:	f0 91 61 00 	lds	r31, 0x0061
     2ca:	09 95       	icall
}
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	ff 91       	pop	r31
     2d2:	ef 91       	pop	r30
     2d4:	bf 91       	pop	r27
     2d6:	af 91       	pop	r26
     2d8:	9f 91       	pop	r25
     2da:	8f 91       	pop	r24
     2dc:	7f 91       	pop	r23
     2de:	6f 91       	pop	r22
     2e0:	5f 91       	pop	r21
     2e2:	4f 91       	pop	r20
     2e4:	3f 91       	pop	r19
     2e6:	2f 91       	pop	r18
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <MEXINT_VOIDINT0CallBackFunction>:
 * Return value: None
 * Description: ISR of INT0
 ************************************************************************************/

En_EXINTState_t MEXINT_VOIDINT0CallBackFunction (void (* Copy_VOIDCallBackPtr) (void))
{
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <MEXINT_VOIDINT0CallBackFunction+0x6>
     2f8:	0f 92       	push	r0
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	9b 83       	std	Y+3, r25	; 0x03
     300:	8a 83       	std	Y+2, r24	; 0x02
	En_EXINTState_t LOC_ENState = EXINT_NOT_OK;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	89 83       	std	Y+1, r24	; 0x01
	/*Storing the value of the passed function in the Call Back Pointer*/
	 GLOB_VOIDINT0CallBackPtr = Copy_VOIDCallBackPtr;
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	9b 81       	ldd	r25, Y+3	; 0x03
     30a:	90 93 61 00 	sts	0x0061, r25
     30e:	80 93 60 00 	sts	0x0060, r24
	 LOC_ENState= EXINT_OK;
     312:	19 82       	std	Y+1, r1	; 0x01
	 return LOC_ENState;
     314:	89 81       	ldd	r24, Y+1	; 0x01
}
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	cf 91       	pop	r28
     31e:	df 91       	pop	r29
     320:	08 95       	ret

00000322 <MDIO_VOIDSetPinDirection>:
 * Return value: En_DIOState_t - The state of the function
 * Description: Function to set the direction of a specific pin inside a specific port
 ************************************************************************************/

En_DIOState_t MDIO_VOIDSetPinDirection (uint8_t Copy_U8Port, uint8_t Copy_U8Pin, uint8_t Copy_U8Direction)
{
     322:	df 93       	push	r29
     324:	cf 93       	push	r28
     326:	00 d0       	rcall	.+0      	; 0x328 <MDIO_VOIDSetPinDirection+0x6>
     328:	00 d0       	rcall	.+0      	; 0x32a <MDIO_VOIDSetPinDirection+0x8>
     32a:	00 d0       	rcall	.+0      	; 0x32c <MDIO_VOIDSetPinDirection+0xa>
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	8a 83       	std	Y+2, r24	; 0x02
     332:	6b 83       	std	Y+3, r22	; 0x03
     334:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Variable to return the state of the function*/
	En_DIOState_t LOC_ENState= DIO_NOT_OK;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	89 83       	std	Y+1, r24	; 0x01
	/*Switch on port value */
	switch (Copy_U8Port)
     33a:	8a 81       	ldd	r24, Y+2	; 0x02
     33c:	28 2f       	mov	r18, r24
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	2d 83       	std	Y+5, r18	; 0x05
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	9e 81       	ldd	r25, Y+6	; 0x06
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	91 05       	cpc	r25, r1
     34c:	09 f4       	brne	.+2      	; 0x350 <MDIO_VOIDSetPinDirection+0x2e>
     34e:	4b c0       	rjmp	.+150    	; 0x3e6 <MDIO_VOIDSetPinDirection+0xc4>
     350:	2d 81       	ldd	r18, Y+5	; 0x05
     352:	3e 81       	ldd	r19, Y+6	; 0x06
     354:	22 30       	cpi	r18, 0x02	; 2
     356:	31 05       	cpc	r19, r1
     358:	2c f4       	brge	.+10     	; 0x364 <MDIO_VOIDSetPinDirection+0x42>
     35a:	8d 81       	ldd	r24, Y+5	; 0x05
     35c:	9e 81       	ldd	r25, Y+6	; 0x06
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	71 f0       	breq	.+28     	; 0x37e <MDIO_VOIDSetPinDirection+0x5c>
     362:	dc c0       	rjmp	.+440    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
     364:	2d 81       	ldd	r18, Y+5	; 0x05
     366:	3e 81       	ldd	r19, Y+6	; 0x06
     368:	22 30       	cpi	r18, 0x02	; 2
     36a:	31 05       	cpc	r19, r1
     36c:	09 f4       	brne	.+2      	; 0x370 <MDIO_VOIDSetPinDirection+0x4e>
     36e:	6f c0       	rjmp	.+222    	; 0x44e <MDIO_VOIDSetPinDirection+0x12c>
     370:	8d 81       	ldd	r24, Y+5	; 0x05
     372:	9e 81       	ldd	r25, Y+6	; 0x06
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	91 05       	cpc	r25, r1
     378:	09 f4       	brne	.+2      	; 0x37c <MDIO_VOIDSetPinDirection+0x5a>
     37a:	9d c0       	rjmp	.+314    	; 0x4b6 <MDIO_VOIDSetPinDirection+0x194>
     37c:	cf c0       	rjmp	.+414    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
	{
	/*If condition inside each case to get the direction and storing the direction into the DDR register*/
	case PORTA:
		if (LOW == Copy_U8Direction)
     37e:	8c 81       	ldd	r24, Y+4	; 0x04
     380:	88 23       	and	r24, r24
     382:	b1 f4       	brne	.+44     	; 0x3b0 <MDIO_VOIDSetPinDirection+0x8e>
		{
			CLR_BIT(DDRA_REG,Copy_U8Pin);
     384:	aa e3       	ldi	r26, 0x3A	; 58
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	ea e3       	ldi	r30, 0x3A	; 58
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	48 2f       	mov	r20, r24
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 2e       	mov	r0, r18
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <MDIO_VOIDSetPinDirection+0x80>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	0a 94       	dec	r0
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <MDIO_VOIDSetPinDirection+0x7c>
     3a6:	80 95       	com	r24
     3a8:	84 23       	and	r24, r20
     3aa:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     3ac:	19 82       	std	Y+1, r1	; 0x01
     3ae:	b6 c0       	rjmp	.+364    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else if(HIGH == Copy_U8Direction)
     3b0:	8c 81       	ldd	r24, Y+4	; 0x04
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	a9 f4       	brne	.+42     	; 0x3e0 <MDIO_VOIDSetPinDirection+0xbe>
		{
			SET_BIT(DDRA_REG,Copy_U8Pin);
     3b6:	aa e3       	ldi	r26, 0x3A	; 58
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	ea e3       	ldi	r30, 0x3A	; 58
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	48 2f       	mov	r20, r24
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	02 2e       	mov	r0, r18
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <MDIO_VOIDSetPinDirection+0xb2>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	0a 94       	dec	r0
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <MDIO_VOIDSetPinDirection+0xae>
     3d8:	84 2b       	or	r24, r20
     3da:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     3dc:	19 82       	std	Y+1, r1	; 0x01
     3de:	9e c0       	rjmp	.+316    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	89 83       	std	Y+1, r24	; 0x01
     3e4:	9b c0       	rjmp	.+310    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		break;
	case PORTB:
		if (LOW == Copy_U8Direction)
     3e6:	8c 81       	ldd	r24, Y+4	; 0x04
     3e8:	88 23       	and	r24, r24
     3ea:	b1 f4       	brne	.+44     	; 0x418 <MDIO_VOIDSetPinDirection+0xf6>
		{
			CLR_BIT(DDRB_REG,Copy_U8Pin);
     3ec:	a7 e3       	ldi	r26, 0x37	; 55
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	e7 e3       	ldi	r30, 0x37	; 55
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	48 2f       	mov	r20, r24
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	28 2f       	mov	r18, r24
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	02 2e       	mov	r0, r18
     404:	02 c0       	rjmp	.+4      	; 0x40a <MDIO_VOIDSetPinDirection+0xe8>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	0a 94       	dec	r0
     40c:	e2 f7       	brpl	.-8      	; 0x406 <MDIO_VOIDSetPinDirection+0xe4>
     40e:	80 95       	com	r24
     410:	84 23       	and	r24, r20
     412:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     414:	19 82       	std	Y+1, r1	; 0x01
     416:	82 c0       	rjmp	.+260    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else if(HIGH == Copy_U8Direction)
     418:	8c 81       	ldd	r24, Y+4	; 0x04
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	a9 f4       	brne	.+42     	; 0x448 <MDIO_VOIDSetPinDirection+0x126>
		{
			SET_BIT(DDRB_REG,Copy_U8Pin);
     41e:	a7 e3       	ldi	r26, 0x37	; 55
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	e7 e3       	ldi	r30, 0x37	; 55
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	48 2f       	mov	r20, r24
     42a:	8b 81       	ldd	r24, Y+3	; 0x03
     42c:	28 2f       	mov	r18, r24
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 2e       	mov	r0, r18
     436:	02 c0       	rjmp	.+4      	; 0x43c <MDIO_VOIDSetPinDirection+0x11a>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	0a 94       	dec	r0
     43e:	e2 f7       	brpl	.-8      	; 0x438 <MDIO_VOIDSetPinDirection+0x116>
     440:	84 2b       	or	r24, r20
     442:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     444:	19 82       	std	Y+1, r1	; 0x01
     446:	6a c0       	rjmp	.+212    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	67 c0       	rjmp	.+206    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		break;
	case PORTC:
		if (LOW == Copy_U8Direction)
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	88 23       	and	r24, r24
     452:	b1 f4       	brne	.+44     	; 0x480 <MDIO_VOIDSetPinDirection+0x15e>
		{
			CLR_BIT(DDRC_REG,Copy_U8Pin);
     454:	a4 e3       	ldi	r26, 0x34	; 52
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e4 e3       	ldi	r30, 0x34	; 52
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	48 2f       	mov	r20, r24
     460:	8b 81       	ldd	r24, Y+3	; 0x03
     462:	28 2f       	mov	r18, r24
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 2e       	mov	r0, r18
     46c:	02 c0       	rjmp	.+4      	; 0x472 <MDIO_VOIDSetPinDirection+0x150>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <MDIO_VOIDSetPinDirection+0x14c>
     476:	80 95       	com	r24
     478:	84 23       	and	r24, r20
     47a:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     47c:	19 82       	std	Y+1, r1	; 0x01
     47e:	4e c0       	rjmp	.+156    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else if(HIGH == Copy_U8Direction)
     480:	8c 81       	ldd	r24, Y+4	; 0x04
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	a9 f4       	brne	.+42     	; 0x4b0 <MDIO_VOIDSetPinDirection+0x18e>
		{
			SET_BIT(DDRC_REG,Copy_U8Pin);
     486:	a4 e3       	ldi	r26, 0x34	; 52
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	e4 e3       	ldi	r30, 0x34	; 52
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	48 2f       	mov	r20, r24
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	28 2f       	mov	r18, r24
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	02 2e       	mov	r0, r18
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <MDIO_VOIDSetPinDirection+0x182>
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	0a 94       	dec	r0
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <MDIO_VOIDSetPinDirection+0x17e>
     4a8:	84 2b       	or	r24, r20
     4aa:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     4ac:	19 82       	std	Y+1, r1	; 0x01
     4ae:	36 c0       	rjmp	.+108    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	33 c0       	rjmp	.+102    	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		break;
	case PORTD:
		if (LOW == Copy_U8Direction)
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	88 23       	and	r24, r24
     4ba:	b1 f4       	brne	.+44     	; 0x4e8 <MDIO_VOIDSetPinDirection+0x1c6>
		{
			CLR_BIT(DDRD_REG,Copy_U8Pin);
     4bc:	a1 e3       	ldi	r26, 0x31	; 49
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	e1 e3       	ldi	r30, 0x31	; 49
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	48 2f       	mov	r20, r24
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	28 2f       	mov	r18, r24
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 2e       	mov	r0, r18
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <MDIO_VOIDSetPinDirection+0x1b8>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	0a 94       	dec	r0
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <MDIO_VOIDSetPinDirection+0x1b4>
     4de:	80 95       	com	r24
     4e0:	84 23       	and	r24, r20
     4e2:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     4e4:	19 82       	std	Y+1, r1	; 0x01
     4e6:	1a c0       	rjmp	.+52     	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else if(HIGH == Copy_U8Direction)
     4e8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	a9 f4       	brne	.+42     	; 0x518 <MDIO_VOIDSetPinDirection+0x1f6>
		{
			SET_BIT(DDRD_REG,Copy_U8Pin);
     4ee:	a1 e3       	ldi	r26, 0x31	; 49
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	e1 e3       	ldi	r30, 0x31	; 49
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	48 2f       	mov	r20, r24
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	28 2f       	mov	r18, r24
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	02 2e       	mov	r0, r18
     506:	02 c0       	rjmp	.+4      	; 0x50c <MDIO_VOIDSetPinDirection+0x1ea>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	0a 94       	dec	r0
     50e:	e2 f7       	brpl	.-8      	; 0x508 <MDIO_VOIDSetPinDirection+0x1e6>
     510:	84 2b       	or	r24, r20
     512:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     514:	19 82       	std	Y+1, r1	; 0x01
     516:	02 c0       	rjmp	.+4      	; 0x51c <MDIO_VOIDSetPinDirection+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	default: break;
	}
	return LOC_ENState;
     51c:	89 81       	ldd	r24, Y+1	; 0x01
}
     51e:	26 96       	adiw	r28, 0x06	; 6
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	cf 91       	pop	r28
     52c:	df 91       	pop	r29
     52e:	08 95       	ret

00000530 <MDIO_VOIDSetPortDirection>:
 * Return value: En_DIOState_t - The state of the function
 * Description: Function to set the direction of a specific port
 ************************************************************************************/

En_DIOState_t MDIO_VOIDSetPortDirection (uint8_t Copy_U8Port, uint8_t Copy_U8Direction)
{
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	00 d0       	rcall	.+0      	; 0x536 <MDIO_VOIDSetPortDirection+0x6>
     536:	00 d0       	rcall	.+0      	; 0x538 <MDIO_VOIDSetPortDirection+0x8>
     538:	0f 92       	push	r0
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	8a 83       	std	Y+2, r24	; 0x02
     540:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Variable to return the state of the function*/
	En_DIOState_t LOC_ENState=DIO_NOT_OK;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	89 83       	std	Y+1, r24	; 0x01
	/*Switch on port value */
	switch (Copy_U8Port)
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	28 2f       	mov	r18, r24
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	3d 83       	std	Y+5, r19	; 0x05
     54e:	2c 83       	std	Y+4, r18	; 0x04
     550:	8c 81       	ldd	r24, Y+4	; 0x04
     552:	9d 81       	ldd	r25, Y+5	; 0x05
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	91 05       	cpc	r25, r1
     558:	d9 f0       	breq	.+54     	; 0x590 <MDIO_VOIDSetPortDirection+0x60>
     55a:	2c 81       	ldd	r18, Y+4	; 0x04
     55c:	3d 81       	ldd	r19, Y+5	; 0x05
     55e:	22 30       	cpi	r18, 0x02	; 2
     560:	31 05       	cpc	r19, r1
     562:	2c f4       	brge	.+10     	; 0x56e <MDIO_VOIDSetPortDirection+0x3e>
     564:	8c 81       	ldd	r24, Y+4	; 0x04
     566:	9d 81       	ldd	r25, Y+5	; 0x05
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	61 f0       	breq	.+24     	; 0x584 <MDIO_VOIDSetPortDirection+0x54>
     56c:	22 c0       	rjmp	.+68     	; 0x5b2 <MDIO_VOIDSetPortDirection+0x82>
     56e:	2c 81       	ldd	r18, Y+4	; 0x04
     570:	3d 81       	ldd	r19, Y+5	; 0x05
     572:	22 30       	cpi	r18, 0x02	; 2
     574:	31 05       	cpc	r19, r1
     576:	91 f0       	breq	.+36     	; 0x59c <MDIO_VOIDSetPortDirection+0x6c>
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	9d 81       	ldd	r25, Y+5	; 0x05
     57c:	83 30       	cpi	r24, 0x03	; 3
     57e:	91 05       	cpc	r25, r1
     580:	99 f0       	breq	.+38     	; 0x5a8 <MDIO_VOIDSetPortDirection+0x78>
     582:	17 c0       	rjmp	.+46     	; 0x5b2 <MDIO_VOIDSetPortDirection+0x82>
	{
	/*Storing the value of the direction into the DDR register*/
	case PORTA:
		DDRA_REG=Copy_U8Direction;
     584:	ea e3       	ldi	r30, 0x3A	; 58
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     58c:	19 82       	std	Y+1, r1	; 0x01
     58e:	11 c0       	rjmp	.+34     	; 0x5b2 <MDIO_VOIDSetPortDirection+0x82>
		break;
	case PORTB:
		DDRB_REG=Copy_U8Direction;
     590:	e7 e3       	ldi	r30, 0x37	; 55
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     598:	19 82       	std	Y+1, r1	; 0x01
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <MDIO_VOIDSetPortDirection+0x82>
		break;
	case PORTC:
		DDRC_REG=Copy_U8Direction;
     59c:	e4 e3       	ldi	r30, 0x34	; 52
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     5a4:	19 82       	std	Y+1, r1	; 0x01
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <MDIO_VOIDSetPortDirection+0x82>
		break;
	case PORTD:
		DDRD_REG=Copy_U8Direction;
     5a8:	e1 e3       	ldi	r30, 0x31	; 49
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     5b0:	19 82       	std	Y+1, r1	; 0x01
		break;
	default: break;
	}
	return LOC_ENState;
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	08 95       	ret

000005c4 <MDIO_VOIDSetPinValue>:
 * Return value: En_DIOState_t - The state of the function
 * Description: Function to set the value of a specific pin inside a specific port
 ************************************************************************************/

En_DIOState_t MDIO_VOIDSetPinValue (uint8_t Copy_U8Port, uint8_t Copy_U8Pin, uint8_t Copy_U8Value)
{
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <MDIO_VOIDSetPinValue+0x6>
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <MDIO_VOIDSetPinValue+0x8>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <MDIO_VOIDSetPinValue+0xa>
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	8a 83       	std	Y+2, r24	; 0x02
     5d4:	6b 83       	std	Y+3, r22	; 0x03
     5d6:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Variable to return the state of the function*/
	En_DIOState_t LOC_ENState=DIO_NOT_OK;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	89 83       	std	Y+1, r24	; 0x01
	/*Switch on port value */
	switch (Copy_U8Port)
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	3e 83       	std	Y+6, r19	; 0x06
     5e4:	2d 83       	std	Y+5, r18	; 0x05
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	91 05       	cpc	r25, r1
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <MDIO_VOIDSetPinValue+0x2e>
     5f0:	4b c0       	rjmp	.+150    	; 0x688 <MDIO_VOIDSetPinValue+0xc4>
     5f2:	2d 81       	ldd	r18, Y+5	; 0x05
     5f4:	3e 81       	ldd	r19, Y+6	; 0x06
     5f6:	22 30       	cpi	r18, 0x02	; 2
     5f8:	31 05       	cpc	r19, r1
     5fa:	2c f4       	brge	.+10     	; 0x606 <MDIO_VOIDSetPinValue+0x42>
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	9e 81       	ldd	r25, Y+6	; 0x06
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	71 f0       	breq	.+28     	; 0x620 <MDIO_VOIDSetPinValue+0x5c>
     604:	dc c0       	rjmp	.+440    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
     606:	2d 81       	ldd	r18, Y+5	; 0x05
     608:	3e 81       	ldd	r19, Y+6	; 0x06
     60a:	22 30       	cpi	r18, 0x02	; 2
     60c:	31 05       	cpc	r19, r1
     60e:	09 f4       	brne	.+2      	; 0x612 <MDIO_VOIDSetPinValue+0x4e>
     610:	6f c0       	rjmp	.+222    	; 0x6f0 <MDIO_VOIDSetPinValue+0x12c>
     612:	8d 81       	ldd	r24, Y+5	; 0x05
     614:	9e 81       	ldd	r25, Y+6	; 0x06
     616:	83 30       	cpi	r24, 0x03	; 3
     618:	91 05       	cpc	r25, r1
     61a:	09 f4       	brne	.+2      	; 0x61e <MDIO_VOIDSetPinValue+0x5a>
     61c:	9d c0       	rjmp	.+314    	; 0x758 <MDIO_VOIDSetPinValue+0x194>
     61e:	cf c0       	rjmp	.+414    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
	{
	/*If condition inside each case to get the value then storing the value into the pin*/
	case PORTA:
		if (LOW == Copy_U8Value)
     620:	8c 81       	ldd	r24, Y+4	; 0x04
     622:	88 23       	and	r24, r24
     624:	b1 f4       	brne	.+44     	; 0x652 <MDIO_VOIDSetPinValue+0x8e>
		{
			CLR_BIT(PORTA_REG,Copy_U8Pin);
     626:	ab e3       	ldi	r26, 0x3B	; 59
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	eb e3       	ldi	r30, 0x3B	; 59
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	48 2f       	mov	r20, r24
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	28 2f       	mov	r18, r24
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	02 2e       	mov	r0, r18
     63e:	02 c0       	rjmp	.+4      	; 0x644 <MDIO_VOIDSetPinValue+0x80>
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	0a 94       	dec	r0
     646:	e2 f7       	brpl	.-8      	; 0x640 <MDIO_VOIDSetPinValue+0x7c>
     648:	80 95       	com	r24
     64a:	84 23       	and	r24, r20
     64c:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	b6 c0       	rjmp	.+364    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else if(HIGH == Copy_U8Value)
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	a9 f4       	brne	.+42     	; 0x682 <MDIO_VOIDSetPinValue+0xbe>
		{
			SET_BIT(PORTA_REG,Copy_U8Pin);
     658:	ab e3       	ldi	r26, 0x3B	; 59
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	eb e3       	ldi	r30, 0x3B	; 59
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	48 2f       	mov	r20, r24
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	28 2f       	mov	r18, r24
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	02 2e       	mov	r0, r18
     670:	02 c0       	rjmp	.+4      	; 0x676 <MDIO_VOIDSetPinValue+0xb2>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	0a 94       	dec	r0
     678:	e2 f7       	brpl	.-8      	; 0x672 <MDIO_VOIDSetPinValue+0xae>
     67a:	84 2b       	or	r24, r20
     67c:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     67e:	19 82       	std	Y+1, r1	; 0x01
     680:	9e c0       	rjmp	.+316    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	9b c0       	rjmp	.+310    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		break;
	case PORTB:
		if (LOW == Copy_U8Value)
     688:	8c 81       	ldd	r24, Y+4	; 0x04
     68a:	88 23       	and	r24, r24
     68c:	b1 f4       	brne	.+44     	; 0x6ba <MDIO_VOIDSetPinValue+0xf6>
		{
			CLR_BIT(PORTB_REG,Copy_U8Pin);
     68e:	a8 e3       	ldi	r26, 0x38	; 56
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	e8 e3       	ldi	r30, 0x38	; 56
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	48 2f       	mov	r20, r24
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	02 2e       	mov	r0, r18
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <MDIO_VOIDSetPinValue+0xe8>
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	0a 94       	dec	r0
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <MDIO_VOIDSetPinValue+0xe4>
     6b0:	80 95       	com	r24
     6b2:	84 23       	and	r24, r20
     6b4:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	82 c0       	rjmp	.+260    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else if(HIGH == Copy_U8Value)
     6ba:	8c 81       	ldd	r24, Y+4	; 0x04
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	a9 f4       	brne	.+42     	; 0x6ea <MDIO_VOIDSetPinValue+0x126>
		{
			SET_BIT(PORTB_REG,Copy_U8Pin);
     6c0:	a8 e3       	ldi	r26, 0x38	; 56
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	e8 e3       	ldi	r30, 0x38	; 56
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	48 2f       	mov	r20, r24
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 2e       	mov	r0, r18
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <MDIO_VOIDSetPinValue+0x11a>
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <MDIO_VOIDSetPinValue+0x116>
     6e2:	84 2b       	or	r24, r20
     6e4:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     6e6:	19 82       	std	Y+1, r1	; 0x01
     6e8:	6a c0       	rjmp	.+212    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	67 c0       	rjmp	.+206    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		break;
	case PORTC:
		if (LOW == Copy_U8Value)
     6f0:	8c 81       	ldd	r24, Y+4	; 0x04
     6f2:	88 23       	and	r24, r24
     6f4:	b1 f4       	brne	.+44     	; 0x722 <MDIO_VOIDSetPinValue+0x15e>
		{
			CLR_BIT(PORTC_REG,Copy_U8Pin);
     6f6:	a5 e3       	ldi	r26, 0x35	; 53
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e5 e3       	ldi	r30, 0x35	; 53
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	48 2f       	mov	r20, r24
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	28 2f       	mov	r18, r24
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	02 2e       	mov	r0, r18
     70e:	02 c0       	rjmp	.+4      	; 0x714 <MDIO_VOIDSetPinValue+0x150>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	0a 94       	dec	r0
     716:	e2 f7       	brpl	.-8      	; 0x710 <MDIO_VOIDSetPinValue+0x14c>
     718:	80 95       	com	r24
     71a:	84 23       	and	r24, r20
     71c:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	4e c0       	rjmp	.+156    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else if(HIGH == Copy_U8Value)
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	a9 f4       	brne	.+42     	; 0x752 <MDIO_VOIDSetPinValue+0x18e>
		{
			SET_BIT(PORTC_REG,Copy_U8Pin);
     728:	a5 e3       	ldi	r26, 0x35	; 53
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	e5 e3       	ldi	r30, 0x35	; 53
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	48 2f       	mov	r20, r24
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	28 2f       	mov	r18, r24
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	02 2e       	mov	r0, r18
     740:	02 c0       	rjmp	.+4      	; 0x746 <MDIO_VOIDSetPinValue+0x182>
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	0a 94       	dec	r0
     748:	e2 f7       	brpl	.-8      	; 0x742 <MDIO_VOIDSetPinValue+0x17e>
     74a:	84 2b       	or	r24, r20
     74c:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     74e:	19 82       	std	Y+1, r1	; 0x01
     750:	36 c0       	rjmp	.+108    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	33 c0       	rjmp	.+102    	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		break;
	case PORTD:
		if (LOW == Copy_U8Value)
     758:	8c 81       	ldd	r24, Y+4	; 0x04
     75a:	88 23       	and	r24, r24
     75c:	b1 f4       	brne	.+44     	; 0x78a <MDIO_VOIDSetPinValue+0x1c6>
		{
			CLR_BIT(PORTD_REG,Copy_U8Pin);
     75e:	a2 e3       	ldi	r26, 0x32	; 50
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e2 e3       	ldi	r30, 0x32	; 50
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	48 2f       	mov	r20, r24
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 2e       	mov	r0, r18
     776:	02 c0       	rjmp	.+4      	; 0x77c <MDIO_VOIDSetPinValue+0x1b8>
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	0a 94       	dec	r0
     77e:	e2 f7       	brpl	.-8      	; 0x778 <MDIO_VOIDSetPinValue+0x1b4>
     780:	80 95       	com	r24
     782:	84 23       	and	r24, r20
     784:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     786:	19 82       	std	Y+1, r1	; 0x01
     788:	1a c0       	rjmp	.+52     	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else if(HIGH == Copy_U8Value)
     78a:	8c 81       	ldd	r24, Y+4	; 0x04
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	a9 f4       	brne	.+42     	; 0x7ba <MDIO_VOIDSetPinValue+0x1f6>
		{
			SET_BIT(PORTD_REG,Copy_U8Pin);
     790:	a2 e3       	ldi	r26, 0x32	; 50
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e2 e3       	ldi	r30, 0x32	; 50
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	48 2f       	mov	r20, r24
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	28 2f       	mov	r18, r24
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	02 2e       	mov	r0, r18
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <MDIO_VOIDSetPinValue+0x1ea>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	0a 94       	dec	r0
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <MDIO_VOIDSetPinValue+0x1e6>
     7b2:	84 2b       	or	r24, r20
     7b4:	8c 93       	st	X, r24
			LOC_ENState = DIO_OK;
     7b6:	19 82       	std	Y+1, r1	; 0x01
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <MDIO_VOIDSetPinValue+0x1fa>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState = DIO_NOT_OK;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	default: break;
	}
	return LOC_ENState;
     7be:	89 81       	ldd	r24, Y+1	; 0x01
}
     7c0:	26 96       	adiw	r28, 0x06	; 6
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	cf 91       	pop	r28
     7ce:	df 91       	pop	r29
     7d0:	08 95       	ret

000007d2 <MDIO_VOIDSetPortValue>:
 * Return value: En_DIOState_t - The state of the function
 * Description: Function to store a value inside a specific port
 ************************************************************************************/

En_DIOState_t MDIO_VOIDSetPortValue (uint8_t Copy_U8Port, uint8_t Copy_U8Value)
{
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <MDIO_VOIDSetPortValue+0x6>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <MDIO_VOIDSetPortValue+0x8>
     7da:	0f 92       	push	r0
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	8a 83       	std	Y+2, r24	; 0x02
     7e2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Variable to return the state of the function*/
	En_DIOState_t LOC_ENState=DIO_NOT_OK;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	89 83       	std	Y+1, r24	; 0x01
	/*Switch on port value */
	switch (Copy_U8Port)
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	3d 83       	std	Y+5, r19	; 0x05
     7f0:	2c 83       	std	Y+4, r18	; 0x04
     7f2:	8c 81       	ldd	r24, Y+4	; 0x04
     7f4:	9d 81       	ldd	r25, Y+5	; 0x05
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	91 05       	cpc	r25, r1
     7fa:	d9 f0       	breq	.+54     	; 0x832 <MDIO_VOIDSetPortValue+0x60>
     7fc:	2c 81       	ldd	r18, Y+4	; 0x04
     7fe:	3d 81       	ldd	r19, Y+5	; 0x05
     800:	22 30       	cpi	r18, 0x02	; 2
     802:	31 05       	cpc	r19, r1
     804:	2c f4       	brge	.+10     	; 0x810 <MDIO_VOIDSetPortValue+0x3e>
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	9d 81       	ldd	r25, Y+5	; 0x05
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	61 f0       	breq	.+24     	; 0x826 <MDIO_VOIDSetPortValue+0x54>
     80e:	22 c0       	rjmp	.+68     	; 0x854 <MDIO_VOIDSetPortValue+0x82>
     810:	2c 81       	ldd	r18, Y+4	; 0x04
     812:	3d 81       	ldd	r19, Y+5	; 0x05
     814:	22 30       	cpi	r18, 0x02	; 2
     816:	31 05       	cpc	r19, r1
     818:	91 f0       	breq	.+36     	; 0x83e <MDIO_VOIDSetPortValue+0x6c>
     81a:	8c 81       	ldd	r24, Y+4	; 0x04
     81c:	9d 81       	ldd	r25, Y+5	; 0x05
     81e:	83 30       	cpi	r24, 0x03	; 3
     820:	91 05       	cpc	r25, r1
     822:	99 f0       	breq	.+38     	; 0x84a <MDIO_VOIDSetPortValue+0x78>
     824:	17 c0       	rjmp	.+46     	; 0x854 <MDIO_VOIDSetPortValue+0x82>
	{
	/*Storing the value of the port into the PORT register*/
	case PORTA:
		PORTA_REG=Copy_U8Value;
     826:	eb e3       	ldi	r30, 0x3B	; 59
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     82e:	19 82       	std	Y+1, r1	; 0x01
     830:	11 c0       	rjmp	.+34     	; 0x854 <MDIO_VOIDSetPortValue+0x82>
		break;
	case PORTB:
		PORTB_REG=Copy_U8Value;
     832:	e8 e3       	ldi	r30, 0x38	; 56
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     83a:	19 82       	std	Y+1, r1	; 0x01
     83c:	0b c0       	rjmp	.+22     	; 0x854 <MDIO_VOIDSetPortValue+0x82>
		break;
	case PORTC:
		PORTC_REG=Copy_U8Value;
     83e:	e5 e3       	ldi	r30, 0x35	; 53
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     846:	19 82       	std	Y+1, r1	; 0x01
     848:	05 c0       	rjmp	.+10     	; 0x854 <MDIO_VOIDSetPortValue+0x82>
		break;
	case PORTD:
		PORTD_REG=Copy_U8Value;
     84a:	e2 e3       	ldi	r30, 0x32	; 50
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	80 83       	st	Z, r24
		LOC_ENState = DIO_OK;
     852:	19 82       	std	Y+1, r1	; 0x01
		break;
	default: break;
	}
	return LOC_ENState;
     854:	89 81       	ldd	r24, Y+1	; 0x01
}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	cf 91       	pop	r28
     862:	df 91       	pop	r29
     864:	08 95       	ret

00000866 <MDIO_VOIDTogglePinValue>:
 * Return value: En_DIOState_t - The state of the function
 * Description: Function to complement the value of a specific pin inside a specific port
 ************************************************************************************/

En_DIOState_t MDIO_VOIDTogglePinValue (uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	00 d0       	rcall	.+0      	; 0x86c <MDIO_VOIDTogglePinValue+0x6>
     86c:	00 d0       	rcall	.+0      	; 0x86e <MDIO_VOIDTogglePinValue+0x8>
     86e:	0f 92       	push	r0
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	8a 83       	std	Y+2, r24	; 0x02
     876:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Variable to return the state of the function*/
	En_DIOState_t LOC_ENState=DIO_NOT_OK;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	89 83       	std	Y+1, r24	; 0x01
	/*Switch on port value */
	switch (Copy_U8Port)
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	3d 83       	std	Y+5, r19	; 0x05
     884:	2c 83       	std	Y+4, r18	; 0x04
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	91 05       	cpc	r25, r1
     88e:	59 f1       	breq	.+86     	; 0x8e6 <MDIO_VOIDTogglePinValue+0x80>
     890:	2c 81       	ldd	r18, Y+4	; 0x04
     892:	3d 81       	ldd	r19, Y+5	; 0x05
     894:	22 30       	cpi	r18, 0x02	; 2
     896:	31 05       	cpc	r19, r1
     898:	2c f4       	brge	.+10     	; 0x8a4 <MDIO_VOIDTogglePinValue+0x3e>
     89a:	8c 81       	ldd	r24, Y+4	; 0x04
     89c:	9d 81       	ldd	r25, Y+5	; 0x05
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	69 f0       	breq	.+26     	; 0x8bc <MDIO_VOIDTogglePinValue+0x56>
     8a2:	5f c0       	rjmp	.+190    	; 0x962 <MDIO_VOIDTogglePinValue+0xfc>
     8a4:	2c 81       	ldd	r18, Y+4	; 0x04
     8a6:	3d 81       	ldd	r19, Y+5	; 0x05
     8a8:	22 30       	cpi	r18, 0x02	; 2
     8aa:	31 05       	cpc	r19, r1
     8ac:	89 f1       	breq	.+98     	; 0x910 <MDIO_VOIDTogglePinValue+0xaa>
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	9d 81       	ldd	r25, Y+5	; 0x05
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	91 05       	cpc	r25, r1
     8b6:	09 f4       	brne	.+2      	; 0x8ba <MDIO_VOIDTogglePinValue+0x54>
     8b8:	40 c0       	rjmp	.+128    	; 0x93a <MDIO_VOIDTogglePinValue+0xd4>
     8ba:	53 c0       	rjmp	.+166    	; 0x962 <MDIO_VOIDTogglePinValue+0xfc>
	{
	/*Complementing the value of the bit*/
	case PORTA:
		TOGGLE_BIT(PORTA_REG,Copy_U8Pin);
     8bc:	ab e3       	ldi	r26, 0x3B	; 59
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	eb e3       	ldi	r30, 0x3B	; 59
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	48 2f       	mov	r20, r24
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	28 2f       	mov	r18, r24
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	02 2e       	mov	r0, r18
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <MDIO_VOIDTogglePinValue+0x74>
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	0a 94       	dec	r0
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <MDIO_VOIDTogglePinValue+0x70>
     8de:	84 27       	eor	r24, r20
     8e0:	8c 93       	st	X, r24
		LOC_ENState = DIO_OK;
     8e2:	19 82       	std	Y+1, r1	; 0x01
     8e4:	3e c0       	rjmp	.+124    	; 0x962 <MDIO_VOIDTogglePinValue+0xfc>
		break;
	case PORTB:
		TOGGLE_BIT(PORTB_REG,Copy_U8Pin);
     8e6:	a8 e3       	ldi	r26, 0x38	; 56
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e8 e3       	ldi	r30, 0x38	; 56
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	48 2f       	mov	r20, r24
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	02 2e       	mov	r0, r18
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <MDIO_VOIDTogglePinValue+0x9e>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900 <MDIO_VOIDTogglePinValue+0x9a>
     908:	84 27       	eor	r24, r20
     90a:	8c 93       	st	X, r24
		LOC_ENState = DIO_OK;
     90c:	19 82       	std	Y+1, r1	; 0x01
     90e:	29 c0       	rjmp	.+82     	; 0x962 <MDIO_VOIDTogglePinValue+0xfc>
		break;
	case PORTC:
		TOGGLE_BIT(PORTC_REG,Copy_U8Pin);
     910:	a5 e3       	ldi	r26, 0x35	; 53
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e5 e3       	ldi	r30, 0x35	; 53
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	48 2f       	mov	r20, r24
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	28 2f       	mov	r18, r24
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	02 2e       	mov	r0, r18
     928:	02 c0       	rjmp	.+4      	; 0x92e <MDIO_VOIDTogglePinValue+0xc8>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	0a 94       	dec	r0
     930:	e2 f7       	brpl	.-8      	; 0x92a <MDIO_VOIDTogglePinValue+0xc4>
     932:	84 27       	eor	r24, r20
     934:	8c 93       	st	X, r24
		LOC_ENState = DIO_OK;
     936:	19 82       	std	Y+1, r1	; 0x01
     938:	14 c0       	rjmp	.+40     	; 0x962 <MDIO_VOIDTogglePinValue+0xfc>
		break;
	case PORTD:
		TOGGLE_BIT(PORTD_REG,Copy_U8Pin);
     93a:	a2 e3       	ldi	r26, 0x32	; 50
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	e2 e3       	ldi	r30, 0x32	; 50
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	48 2f       	mov	r20, r24
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	02 2e       	mov	r0, r18
     952:	02 c0       	rjmp	.+4      	; 0x958 <MDIO_VOIDTogglePinValue+0xf2>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	0a 94       	dec	r0
     95a:	e2 f7       	brpl	.-8      	; 0x954 <MDIO_VOIDTogglePinValue+0xee>
     95c:	84 27       	eor	r24, r20
     95e:	8c 93       	st	X, r24
		LOC_ENState = DIO_OK;
     960:	19 82       	std	Y+1, r1	; 0x01
		break;
	default: break;
	}
	return LOC_ENState;
     962:	89 81       	ldd	r24, Y+1	; 0x01
}
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <MDIO_U8GetPinValue>:
 * Return value: En_DIOState_t - The state of the function
 * Description: Function to return the value of a specific pin inside a specific port
 ************************************************************************************/

En_DIOState_t MDIO_U8GetPinValue (uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	00 d0       	rcall	.+0      	; 0x97a <MDIO_U8GetPinValue+0x6>
     97a:	00 d0       	rcall	.+0      	; 0x97c <MDIO_U8GetPinValue+0x8>
     97c:	00 d0       	rcall	.+0      	; 0x97e <MDIO_U8GetPinValue+0xa>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	8b 83       	std	Y+3, r24	; 0x03
     984:	6c 83       	std	Y+4, r22	; 0x04
	/*Variable to store the value of the pin into then returning it*/
	uint8_t LOC_U8RetVal;
	/*Variable to store the state of the function*/
	En_DIOState_t LOC_ENState=DIO_NOT_OK;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	89 83       	std	Y+1, r24	; 0x01
	/*Switch on port value */
	switch (Copy_U8Port)
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	3e 83       	std	Y+6, r19	; 0x06
     992:	2d 83       	std	Y+5, r18	; 0x05
     994:	4d 81       	ldd	r20, Y+5	; 0x05
     996:	5e 81       	ldd	r21, Y+6	; 0x06
     998:	41 30       	cpi	r20, 0x01	; 1
     99a:	51 05       	cpc	r21, r1
     99c:	c1 f1       	breq	.+112    	; 0xa0e <MDIO_U8GetPinValue+0x9a>
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	91 05       	cpc	r25, r1
     9a6:	34 f4       	brge	.+12     	; 0x9b4 <MDIO_U8GetPinValue+0x40>
     9a8:	2d 81       	ldd	r18, Y+5	; 0x05
     9aa:	3e 81       	ldd	r19, Y+6	; 0x06
     9ac:	21 15       	cp	r18, r1
     9ae:	31 05       	cpc	r19, r1
     9b0:	71 f0       	breq	.+28     	; 0x9ce <MDIO_U8GetPinValue+0x5a>
     9b2:	8c c0       	rjmp	.+280    	; 0xacc <MDIO_U8GetPinValue+0x158>
     9b4:	4d 81       	ldd	r20, Y+5	; 0x05
     9b6:	5e 81       	ldd	r21, Y+6	; 0x06
     9b8:	42 30       	cpi	r20, 0x02	; 2
     9ba:	51 05       	cpc	r21, r1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <MDIO_U8GetPinValue+0x4c>
     9be:	47 c0       	rjmp	.+142    	; 0xa4e <MDIO_U8GetPinValue+0xda>
     9c0:	8d 81       	ldd	r24, Y+5	; 0x05
     9c2:	9e 81       	ldd	r25, Y+6	; 0x06
     9c4:	83 30       	cpi	r24, 0x03	; 3
     9c6:	91 05       	cpc	r25, r1
     9c8:	09 f4       	brne	.+2      	; 0x9cc <MDIO_U8GetPinValue+0x58>
     9ca:	61 c0       	rjmp	.+194    	; 0xa8e <MDIO_U8GetPinValue+0x11a>
     9cc:	7f c0       	rjmp	.+254    	; 0xacc <MDIO_U8GetPinValue+0x158>
	{
	/*Storing the value of the bit*/
	case PORTA:
		LOC_U8RetVal=GET_BIT(PINA_REG,Copy_U8Pin);
     9ce:	e9 e3       	ldi	r30, 0x39	; 57
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	28 2f       	mov	r18, r24
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	8c 81       	ldd	r24, Y+4	; 0x04
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <MDIO_U8GetPinValue+0x72>
     9e2:	55 95       	asr	r21
     9e4:	47 95       	ror	r20
     9e6:	8a 95       	dec	r24
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <MDIO_U8GetPinValue+0x6e>
     9ea:	ca 01       	movw	r24, r20
     9ec:	81 70       	andi	r24, 0x01	; 1
     9ee:	8a 83       	std	Y+2, r24	; 0x02
		if (LOC_U8RetVal == HIGH)
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	19 f4       	brne	.+6      	; 0x9fc <MDIO_U8GetPinValue+0x88>
		{
			LOC_ENState=DIO_HIGH;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	68 c0       	rjmp	.+208    	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else if (LOC_U8RetVal == LOW)
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	88 23       	and	r24, r24
     a00:	19 f4       	brne	.+6      	; 0xa08 <MDIO_U8GetPinValue+0x94>
		{
			LOC_ENState=DIO_LOW;
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	62 c0       	rjmp	.+196    	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else
		{
			LOC_ENState=DIO_NOT_OK;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	5f c0       	rjmp	.+190    	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		break;
	case PORTB:
		LOC_U8RetVal=GET_BIT(PINB_REG,Copy_U8Pin);
     a0e:	e6 e3       	ldi	r30, 0x36	; 54
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	28 2f       	mov	r18, r24
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	88 2f       	mov	r24, r24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a9 01       	movw	r20, r18
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <MDIO_U8GetPinValue+0xb2>
     a22:	55 95       	asr	r21
     a24:	47 95       	ror	r20
     a26:	8a 95       	dec	r24
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <MDIO_U8GetPinValue+0xae>
     a2a:	ca 01       	movw	r24, r20
     a2c:	81 70       	andi	r24, 0x01	; 1
     a2e:	8a 83       	std	Y+2, r24	; 0x02
		if (LOC_U8RetVal == HIGH)
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	19 f4       	brne	.+6      	; 0xa3c <MDIO_U8GetPinValue+0xc8>
		{
			LOC_ENState=DIO_HIGH;
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	48 c0       	rjmp	.+144    	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else if (LOC_U8RetVal == LOW)
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	88 23       	and	r24, r24
     a40:	19 f4       	brne	.+6      	; 0xa48 <MDIO_U8GetPinValue+0xd4>
		{
			LOC_ENState=DIO_LOW;
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	42 c0       	rjmp	.+132    	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else
		{
			LOC_ENState=DIO_NOT_OK;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	3f c0       	rjmp	.+126    	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		break;
	case PORTC:
		LOC_U8RetVal=GET_BIT(PINC_REG,Copy_U8Pin);
     a4e:	e3 e3       	ldi	r30, 0x33	; 51
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	28 2f       	mov	r18, r24
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a9 01       	movw	r20, r18
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <MDIO_U8GetPinValue+0xf2>
     a62:	55 95       	asr	r21
     a64:	47 95       	ror	r20
     a66:	8a 95       	dec	r24
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <MDIO_U8GetPinValue+0xee>
     a6a:	ca 01       	movw	r24, r20
     a6c:	81 70       	andi	r24, 0x01	; 1
     a6e:	8a 83       	std	Y+2, r24	; 0x02
		if (LOC_U8RetVal == HIGH)
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	19 f4       	brne	.+6      	; 0xa7c <MDIO_U8GetPinValue+0x108>
		{
			LOC_ENState=DIO_HIGH;
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	28 c0       	rjmp	.+80     	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else if (LOC_U8RetVal == LOW)
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	88 23       	and	r24, r24
     a80:	19 f4       	brne	.+6      	; 0xa88 <MDIO_U8GetPinValue+0x114>
		{
			LOC_ENState=DIO_LOW;
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	22 c0       	rjmp	.+68     	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else
		{
			LOC_ENState=DIO_NOT_OK;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	1f c0       	rjmp	.+62     	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		break;
	case PORTD:
		LOC_U8RetVal=GET_BIT(PIND_REG,Copy_U8Pin);
     a8e:	e0 e3       	ldi	r30, 0x30	; 48
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	28 2f       	mov	r18, r24
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	8c 81       	ldd	r24, Y+4	; 0x04
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a9 01       	movw	r20, r18
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <MDIO_U8GetPinValue+0x132>
     aa2:	55 95       	asr	r21
     aa4:	47 95       	ror	r20
     aa6:	8a 95       	dec	r24
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <MDIO_U8GetPinValue+0x12e>
     aaa:	ca 01       	movw	r24, r20
     aac:	81 70       	andi	r24, 0x01	; 1
     aae:	8a 83       	std	Y+2, r24	; 0x02
		if (LOC_U8RetVal == HIGH)
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	19 f4       	brne	.+6      	; 0xabc <MDIO_U8GetPinValue+0x148>
		{
			LOC_ENState=DIO_HIGH;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	08 c0       	rjmp	.+16     	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else if (LOC_U8RetVal == LOW)
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	88 23       	and	r24, r24
     ac0:	19 f4       	brne	.+6      	; 0xac8 <MDIO_U8GetPinValue+0x154>
		{
			LOC_ENState=DIO_LOW;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <MDIO_U8GetPinValue+0x158>
		}
		else
		{
			LOC_ENState=DIO_NOT_OK;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	default: break;
	}
	return LOC_ENState;
     acc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ace:	26 96       	adiw	r28, 0x06	; 6
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	08 95       	ret

00000ae0 <MDIO_U8GetPortValue>:
 * Return value: uint8_t LOC_U8RetVal - to store the value of the port
 * Description: Function to return the value of a specific port
 ************************************************************************************/

uint8_t MDIO_U8GetPortValue (uint8_t Copy_U8Port)
{
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <MDIO_U8GetPortValue+0x6>
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <MDIO_U8GetPortValue+0x8>
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to store the value of the port into then returning it*/
	uint8_t LOC_U8RetVal;
	/*Switch on port value */
	switch (Copy_U8Port)
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	28 2f       	mov	r18, r24
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	3c 83       	std	Y+4, r19	; 0x04
     af6:	2b 83       	std	Y+3, r18	; 0x03
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	91 05       	cpc	r25, r1
     b00:	d1 f0       	breq	.+52     	; 0xb36 <MDIO_U8GetPortValue+0x56>
     b02:	2b 81       	ldd	r18, Y+3	; 0x03
     b04:	3c 81       	ldd	r19, Y+4	; 0x04
     b06:	22 30       	cpi	r18, 0x02	; 2
     b08:	31 05       	cpc	r19, r1
     b0a:	2c f4       	brge	.+10     	; 0xb16 <MDIO_U8GetPortValue+0x36>
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	9c 81       	ldd	r25, Y+4	; 0x04
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	61 f0       	breq	.+24     	; 0xb2c <MDIO_U8GetPortValue+0x4c>
     b14:	1e c0       	rjmp	.+60     	; 0xb52 <MDIO_U8GetPortValue+0x72>
     b16:	2b 81       	ldd	r18, Y+3	; 0x03
     b18:	3c 81       	ldd	r19, Y+4	; 0x04
     b1a:	22 30       	cpi	r18, 0x02	; 2
     b1c:	31 05       	cpc	r19, r1
     b1e:	81 f0       	breq	.+32     	; 0xb40 <MDIO_U8GetPortValue+0x60>
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	9c 81       	ldd	r25, Y+4	; 0x04
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	91 05       	cpc	r25, r1
     b28:	81 f0       	breq	.+32     	; 0xb4a <MDIO_U8GetPortValue+0x6a>
     b2a:	13 c0       	rjmp	.+38     	; 0xb52 <MDIO_U8GetPortValue+0x72>
	{
	/*Storing the value of the port*/
	case PORTA:
		LOC_U8RetVal=PINA_REG;
     b2c:	e9 e3       	ldi	r30, 0x39	; 57
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	0e c0       	rjmp	.+28     	; 0xb52 <MDIO_U8GetPortValue+0x72>
		break;
	case PORTB:
		LOC_U8RetVal=PINB_REG;
     b36:	e6 e3       	ldi	r30, 0x36	; 54
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <MDIO_U8GetPortValue+0x72>
		break;
	case PORTC:
		LOC_U8RetVal=PINC_REG;
     b40:	e3 e3       	ldi	r30, 0x33	; 51
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <MDIO_U8GetPortValue+0x72>
		break;
	case PORTD:
		LOC_U8RetVal=PIND_REG;
     b4a:	e0 e3       	ldi	r30, 0x30	; 48
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	89 83       	std	Y+1, r24	; 0x01
		break;
	default: break;
	}
	return LOC_U8RetVal;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <HLED_VOIDInit>:
 * Return value: En_LEDState_t - the state of the function
 * Description: Function to initialize a specific pin to be output for LED
 ************************************************************************************/

En_LEDState_t HLED_VOIDInit(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	00 d0       	rcall	.+0      	; 0xb68 <HLED_VOIDInit+0x6>
     b68:	0f 92       	push	r0
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	8a 83       	std	Y+2, r24	; 0x02
     b70:	6b 83       	std	Y+3, r22	; 0x03
	/*Variable to store the state of the function*/
	En_LEDState_t LOC_ENState = LED_NOT_OK;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	89 83       	std	Y+1, r24	; 0x01
	if(MDIO_VOIDSetPinDirection(Copy_U8Port,Copy_U8Pin,HIGH) == DIO_OK)
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	6b 81       	ldd	r22, Y+3	; 0x03
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	0e 94 91 01 	call	0x322	; 0x322 <MDIO_VOIDSetPinDirection>
     b80:	88 23       	and	r24, r24
     b82:	11 f4       	brne	.+4      	; 0xb88 <HLED_VOIDInit+0x26>
	{
		LOC_ENState = LED_OK;
     b84:	19 82       	std	Y+1, r1	; 0x01
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <HLED_VOIDInit+0x2a>
	}
	else
	{
		/*Do Nothing*/
		LOC_ENState = LED_NOT_OK;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ENState;
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <HLED_VOIDON>:
 * Return value: En_LEDState_t - the state of the function
 * Description: Function to set the LED ON
 ************************************************************************************/

En_LEDState_t HLED_VOIDON(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <HLED_VOIDON+0x6>
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	/*Variable to store the state of the function*/
	En_LEDState_t LOC_ENState = LED_NOT_OK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	89 83       	std	Y+1, r24	; 0x01
	if (MDIO_VOIDSetPinValue(Copy_U8Port,Copy_U8Pin,HIGH) == DIO_OK)
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	6b 81       	ldd	r22, Y+3	; 0x03
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <MDIO_VOIDSetPinValue>
     bb8:	88 23       	and	r24, r24
     bba:	11 f4       	brne	.+4      	; 0xbc0 <HLED_VOIDON+0x26>
	{
		LOC_ENState = LED_OK;
     bbc:	19 82       	std	Y+1, r1	; 0x01
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <HLED_VOIDON+0x2a>
	}
	else
	{
		/*Do Nothing*/
		LOC_ENState = LED_NOT_OK;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ENState;
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <HLED_VOIDOFF>:
 * Return value: En_LEDState_t - the state of the function
 * Description: Function to set the LED OFF
 ************************************************************************************/

En_LEDState_t HLED_VOIDOFF(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <HLED_VOIDOFF+0x6>
     bd8:	0f 92       	push	r0
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	8a 83       	std	Y+2, r24	; 0x02
     be0:	6b 83       	std	Y+3, r22	; 0x03
	/*Variable to store the state of the function*/
	En_LEDState_t LOC_ENState = LED_NOT_OK;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	89 83       	std	Y+1, r24	; 0x01
	if (MDIO_VOIDSetPinValue(Copy_U8Port,Copy_U8Pin,LOW) == DIO_OK)
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	6b 81       	ldd	r22, Y+3	; 0x03
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <MDIO_VOIDSetPinValue>
     bf0:	88 23       	and	r24, r24
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <HLED_VOIDOFF+0x26>
	{
		LOC_ENState = LED_OK;
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <HLED_VOIDOFF+0x2a>
	}
	else
	{
		/*Do Nothing*/
		LOC_ENState = LED_NOT_OK;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ENState;
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <HLED_VOIDToggle>:
 * Return value: En_LEDState_t - the state of the function
 * Description: Function to toggle the LED
 ************************************************************************************/

En_LEDState_t HLED_VOIDToggle(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <HLED_VOIDToggle+0x6>
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	8a 83       	std	Y+2, r24	; 0x02
     c18:	6b 83       	std	Y+3, r22	; 0x03
	/*Variable to store the state of the function*/
	En_LEDState_t LOC_ENState = LED_NOT_OK;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	89 83       	std	Y+1, r24	; 0x01
	if (MDIO_VOIDTogglePinValue(Copy_U8Port,Copy_U8Pin) == DIO_OK)
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	6b 81       	ldd	r22, Y+3	; 0x03
     c22:	0e 94 33 04 	call	0x866	; 0x866 <MDIO_VOIDTogglePinValue>
     c26:	88 23       	and	r24, r24
     c28:	11 f4       	brne	.+4      	; 0xc2e <HLED_VOIDToggle+0x24>
	{
		LOC_ENState = LED_OK;
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <HLED_VOIDToggle+0x28>
	}
	else
	{
		/*Do Nothing*/
		LOC_ENState = LED_NOT_OK;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ENState;
     c32:	89 81       	ldd	r24, Y+1	; 0x01
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <HBTN_VOIDInit>:
 * Return value: En_ButtonState_t - the state of the function
 * Description: Function to initialize a specific pin to be input for button
 ************************************************************************************/

En_ButtonState_t HBTN_VOIDInit(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <HBTN_VOIDInit+0x6>
     c46:	0f 92       	push	r0
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	8a 83       	std	Y+2, r24	; 0x02
     c4e:	6b 83       	std	Y+3, r22	; 0x03
	En_ButtonState_t LOC_ENState = BUTTON_NOT_OK;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	89 83       	std	Y+1, r24	; 0x01
	if (MDIO_VOIDSetPinDirection(Copy_U8Port,Copy_U8Pin,INPUT) == DIO_OK)
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	6b 81       	ldd	r22, Y+3	; 0x03
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	0e 94 91 01 	call	0x322	; 0x322 <MDIO_VOIDSetPinDirection>
     c5e:	88 23       	and	r24, r24
     c60:	61 f4       	brne	.+24     	; 0xc7a <HBTN_VOIDInit+0x3a>
	{
		/*Enable Pull up resistance*/
		if (MDIO_VOIDSetPinValue(Copy_U8Port,Copy_U8Pin,HIGH) == DIO_OK)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	6b 81       	ldd	r22, Y+3	; 0x03
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <MDIO_VOIDSetPinValue>
     c6c:	88 23       	and	r24, r24
     c6e:	11 f4       	brne	.+4      	; 0xc74 <HBTN_VOIDInit+0x34>
		{
			LOC_ENState=BUTTON_OK;
     c70:	19 82       	std	Y+1, r1	; 0x01
     c72:	05 c0       	rjmp	.+10     	; 0xc7e <HBTN_VOIDInit+0x3e>
		}
		else
		{
			/*Do Nothing*/
			LOC_ENState=BUTTON_NOT_OK;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <HBTN_VOIDInit+0x3e>
		}
	}
	else
	{
		/*Do Nothing*/
		LOC_ENState=BUTTON_NOT_OK;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ENState;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <APP_VOIDInit>:
 * Return value: EN_APPState_t - to store the state of the function
 * Description: Function to initialize all modules used in the application
 ************************************************************************************/

EN_APPState_t APP_VOIDInit(void)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	0f 92       	push	r0
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*Variable to store the state of the function*/
	EN_APPState_t LOC_ENState = APP_NOT_OK;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize external interrupt on INT0 -> Rising edge*/
	if(MEXINT_VOIDINT0CallBackFunction(APP_VOIDPedestrianMode) == EXINT_OK)
     c9a:	85 e5       	ldi	r24, 0x55	; 85
     c9c:	97 e0       	ldi	r25, 0x07	; 7
     c9e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MEXINT_VOIDINT0CallBackFunction>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f0       	breq	.+2      	; 0xca8 <APP_VOIDInit+0x1c>
     ca6:	59 c0       	rjmp	.+178    	; 0xd5a <APP_VOIDInit+0xce>
	{
		/*Enable the external interrupt*/
		if(MEXINT0_VOIDInit() == EXINT_OK)
     ca8:	0e 94 05 01 	call	0x20a	; 0x20a <MEXINT0_VOIDInit>
     cac:	88 23       	and	r24, r24
     cae:	09 f0       	breq	.+2      	; 0xcb2 <APP_VOIDInit+0x26>
     cb0:	51 c0       	rjmp	.+162    	; 0xd54 <APP_VOIDInit+0xc8>
		{
			/*Store the address of the pedestrian mode*/
			if (MEXINT0_VOIDEnableInt() == EXINT_OK)
     cb2:	0e 94 20 01 	call	0x240	; 0x240 <MEXINT0_VOIDEnableInt>
     cb6:	88 23       	and	r24, r24
     cb8:	09 f0       	breq	.+2      	; 0xcbc <APP_VOIDInit+0x30>
     cba:	49 c0       	rjmp	.+146    	; 0xd4e <APP_VOIDInit+0xc2>
			{
				/*Initialize Timer in CTC mode*/
				if (MTMR0_VOIDCTCInit() == TIMER_OK)
     cbc:	0e 94 3e 00 	call	0x7c	; 0x7c <MTMR0_VOIDCTCInit>
     cc0:	88 23       	and	r24, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <APP_VOIDInit+0x3a>
     cc4:	41 c0       	rjmp	.+130    	; 0xd48 <APP_VOIDInit+0xbc>
				{
					/*Initialize the button at INT0 Pin -> Port D, Pin 2*/
					if (HBTN_VOIDInit(PORTD,PIN2) == BUTTON_OK)
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	62 e0       	ldi	r22, 0x02	; 2
     cca:	0e 94 20 06 	call	0xc40	; 0xc40 <HBTN_VOIDInit>
     cce:	88 23       	and	r24, r24
     cd0:	c1 f5       	brne	.+112    	; 0xd42 <APP_VOIDInit+0xb6>
					{
						/*Initialize LEDs
						 *Car LEDs: Green, Yellow, and Red, connected on Port A, Pins: 0, 1, and 2
						 *Pedestrian LEDs: Green, Yellow, and Red, connected on Port B, Pins: 0, 1, and 2
						 */
						if (HLED_VOIDInit(PORTA,PIN0)==LED_OK)
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	0e 94 b1 05 	call	0xb62	; 0xb62 <HLED_VOIDInit>
     cda:	88 23       	and	r24, r24
     cdc:	79 f5       	brne	.+94     	; 0xd3c <APP_VOIDInit+0xb0>
						{
							if (HLED_VOIDInit(PORTA,PIN1)==LED_OK)
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 b1 05 	call	0xb62	; 0xb62 <HLED_VOIDInit>
     ce6:	88 23       	and	r24, r24
     ce8:	31 f5       	brne	.+76     	; 0xd36 <APP_VOIDInit+0xaa>
							{
								if (HLED_VOIDInit(PORTA,PIN2)==LED_OK)
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	0e 94 b1 05 	call	0xb62	; 0xb62 <HLED_VOIDInit>
     cf2:	88 23       	and	r24, r24
     cf4:	e9 f4       	brne	.+58     	; 0xd30 <APP_VOIDInit+0xa4>
								{
									if (HLED_VOIDInit(PORTB,PIN0)==LED_OK)
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	0e 94 b1 05 	call	0xb62	; 0xb62 <HLED_VOIDInit>
     cfe:	88 23       	and	r24, r24
     d00:	a1 f4       	brne	.+40     	; 0xd2a <APP_VOIDInit+0x9e>
									{
										if (HLED_VOIDInit(PORTB,PIN1)==LED_OK)
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	0e 94 b1 05 	call	0xb62	; 0xb62 <HLED_VOIDInit>
     d0a:	88 23       	and	r24, r24
     d0c:	59 f4       	brne	.+22     	; 0xd24 <APP_VOIDInit+0x98>
										{
											if (HLED_VOIDInit(PORTB,PIN2)==LED_OK)
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	0e 94 b1 05 	call	0xb62	; 0xb62 <HLED_VOIDInit>
     d16:	88 23       	and	r24, r24
     d18:	11 f4       	brne	.+4      	; 0xd1e <APP_VOIDInit+0x92>
											{
												LOC_ENState = APP_OK;
     d1a:	19 82       	std	Y+1, r1	; 0x01
     d1c:	20 c0       	rjmp	.+64     	; 0xd5e <APP_VOIDInit+0xd2>
											}
											else
											{
												LOC_ENState=APP_NOT_OK;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	1d c0       	rjmp	.+58     	; 0xd5e <APP_VOIDInit+0xd2>
											}
										}
										else
										{
											LOC_ENState=APP_NOT_OK;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	1a c0       	rjmp	.+52     	; 0xd5e <APP_VOIDInit+0xd2>
										}

									}
									else
									{
										LOC_ENState=APP_NOT_OK;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	17 c0       	rjmp	.+46     	; 0xd5e <APP_VOIDInit+0xd2>
									}

								}
								else
								{
									LOC_ENState=APP_NOT_OK;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <APP_VOIDInit+0xd2>
								}
							}
							else
							{
								LOC_ENState=APP_NOT_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <APP_VOIDInit+0xd2>
							}
						}
						else
						{
							LOC_ENState=APP_NOT_OK;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	0e c0       	rjmp	.+28     	; 0xd5e <APP_VOIDInit+0xd2>
						}
					}
					else
					{
						LOC_ENState = APP_NOT_OK;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	0b c0       	rjmp	.+22     	; 0xd5e <APP_VOIDInit+0xd2>
					}
				}
				else
				{
					LOC_ENState = APP_NOT_OK;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <APP_VOIDInit+0xd2>
				}
			}
			else
			{
				LOC_ENState = APP_NOT_OK;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <APP_VOIDInit+0xd2>
			}
		}
		else
		{
			LOC_ENState = APP_NOT_OK;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <APP_VOIDInit+0xd2>
		}
	}
	else
	{
		LOC_ENState = APP_NOT_OK;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ENState;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <APP_VOIDNormalMode>:
 * Parameters (out): None
 * Return value: None
 * Description: Function to implement the normal mode
 ************************************************************************************/
void APP_VOIDNormalMode(void)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <APP_VOIDNormalMode+0x6>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_ENColour == START)
     d72:	80 91 62 00 	lds	r24, 0x0062
     d76:	88 23       	and	r24, r24
     d78:	f9 f4       	brne	.+62     	; 0xdb8 <APP_VOIDNormalMode+0x50>
	{
		/*The default pedestrian lights: Red on, yellow/green off */
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Turn off both red and yellow lights*/
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Turn on the green light*/
		HLED_VOIDON(CAR_PORT,CAR_GREEN);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour = GREEN;
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	80 93 62 00 	sts	0x0062, r24
		/*wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>

	}
	if (GLOB_ENColour == GREEN)
     db8:	80 91 62 00 	lds	r24, 0x0062
     dbc:	84 30       	cpi	r24, 0x04	; 4
     dbe:	79 f4       	brne	.+30     	; 0xdde <APP_VOIDNormalMode+0x76>
	{
		/*Turn off both red and green lights*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	62 e0       	ldi	r22, 0x02	; 2
     dcc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Blink the yellow light for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour = YELLOW_1;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	80 93 62 00 	sts	0x0062, r24
	}
	else
	{
		/*Do Nothing*/
	}
	if (GLOB_ENColour == RED)
     dde:	80 91 62 00 	lds	r24, 0x0062
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	79 f4       	brne	.+30     	; 0xe04 <APP_VOIDNormalMode+0x9c>
	{
		/*Turn off both red and green lights*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Blink the yellow light for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour = YELLOW_2;
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	80 93 62 00 	sts	0x0062, r24
	}
	else
	{
		/*Do Nothing*/
	}
	if(GLOB_ENColour == YELLOW_1)
     e04:	80 91 62 00 	lds	r24, 0x0062
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	19 f5       	brne	.+70     	; 0xe52 <APP_VOIDNormalMode+0xea>
	{
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
     e0c:	1a 82       	std	Y+2, r1	; 0x02
     e0e:	0b c0       	rjmp	.+22     	; 0xe26 <APP_VOIDNormalMode+0xbe>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
	{
		/*Do Nothing*/
	}
	if(GLOB_ENColour == YELLOW_1)
	{
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	85 30       	cpi	r24, 0x05	; 5
     e2a:	90 f3       	brcs	.-28     	; 0xe10 <APP_VOIDNormalMode+0xa8>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Turn off both yellow and green lights*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Turn on the red light*/
		HLED_VOIDON(CAR_PORT,CAR_RED);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	62 e0       	ldi	r22, 0x02	; 2
     e40:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour = RED;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 62 00 	sts	0x0062, r24
		/*wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
     e4a:	85 e0       	ldi	r24, 0x05	; 5
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
	}
	else
	{
		/*Do Nothing*/
	}
	if(GLOB_ENColour == YELLOW_2)
     e52:	80 91 62 00 	lds	r24, 0x0062
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	19 f5       	brne	.+70     	; 0xea0 <APP_VOIDNormalMode+0x138>
	{
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	0b c0       	rjmp	.+22     	; 0xe74 <APP_VOIDNormalMode+0x10c>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
	{
		/*Do Nothing*/
	}
	if(GLOB_ENColour == YELLOW_2)
	{
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	90 f3       	brcs	.-28     	; 0xe5e <APP_VOIDNormalMode+0xf6>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Turn off both yellow and red lights*/
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Turn on the green light*/
		HLED_VOIDON(CAR_PORT,CAR_GREEN);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour = GREEN;
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	80 93 62 00 	sts	0x0062, r24
		/*wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
     e98:	85 e0       	ldi	r24, 0x05	; 5
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
	}
	else
	{
		/*Do Nothing*/
	}
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <APP_VOIDPedestrianMode>:
 * Return value: None
 * Description: Function to implement the pedestrian mode
 ************************************************************************************/

void APP_VOIDPedestrianMode(void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	27 97       	sbiw	r28, 0x07	; 7
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
	if (GLOB_ENColour == RED)
     ebe:	80 91 62 00 	lds	r24, 0x0062
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	09 f0       	breq	.+2      	; 0xec8 <APP_VOIDPedestrianMode+0x1e>
     ec6:	52 c0       	rjmp	.+164    	; 0xf6c <APP_VOIDPedestrianMode+0xc2>
	{
		/*Car's red light is on*/
		HLED_VOIDON(CAR_PORT,CAR_RED);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour = RED;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 62 00 	sts	0x0062, r24
		/*Pedestrian's red light is off*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_RED);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Pedestrian's green light is on*/
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Wait for five seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
     ee6:	85 e0       	ldi	r24, 0x05	; 5
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		/*Car's red light off*/
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	62 e0       	ldi	r22, 0x02	; 2
     ef2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =YELLOW_2;
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
     f0c:	1f 82       	std	Y+7, r1	; 0x07
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <APP_VOIDPedestrianMode+0x84>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour =YELLOW_2;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	8f 83       	std	Y+7, r24	; 0x07
     f2e:	8f 81       	ldd	r24, Y+7	; 0x07
     f30:	85 30       	cpi	r24, 0x05	; 5
     f32:	70 f3       	brcs	.-36     	; 0xf10 <APP_VOIDPedestrianMode+0x66>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Prepare to return to the normal mode*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	62 e0       	ldi	r22, 0x02	; 2
     f50:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(CAR_PORT,CAR_GREEN);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =GREEN;
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	80 93 62 00 	sts	0x0062, r24
     f6a:	b5 c1       	rjmp	.+874    	; 0x12d6 <APP_VOIDPedestrianMode+0x42c>
	}
	else if (GLOB_ENColour == GREEN)
     f6c:	80 91 62 00 	lds	r24, 0x0062
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	09 f0       	breq	.+2      	; 0xf76 <APP_VOIDPedestrianMode+0xcc>
     f74:	8d c0       	rjmp	.+282    	; 0x1090 <APP_VOIDPedestrianMode+0x1e6>
	{
		/*Pedestrian's green/yellow is off*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Pedestrian's red light is on*/
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	62 e0       	ldi	r22, 0x02	; 2
     f8a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Car's green/red lights are off*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	62 e0       	ldi	r22, 0x02	; 2
     f9a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour=YELLOW_1;
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<5 ;LOC_U8Iterator++)
     fb4:	1e 82       	std	Y+6, r1	; 0x06
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <APP_VOIDPedestrianMode+0x12c>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour=YELLOW_1;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<5 ;LOC_U8Iterator++)
     fd0:	8e 81       	ldd	r24, Y+6	; 0x06
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	8e 83       	std	Y+6, r24	; 0x06
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	85 30       	cpi	r24, 0x05	; 5
     fda:	70 f3       	brcs	.-36     	; 0xfb8 <APP_VOIDPedestrianMode+0x10e>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Car's red light is on,Car's green/yellow light is off*/
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(CAR_PORT,CAR_RED);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour=RED;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 62 00 	sts	0x0062, r24
		/*Pedestrian's red/yellow light is off,Pedestrian's green light is on*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_RED);
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
    1012:	85 e0       	ldi	r24, 0x05	; 5
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =YELLOW_2;
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
    1030:	1d 82       	std	Y+5, r1	; 0x05
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <APP_VOIDPedestrianMode+0x1a8>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		MTMR0_VOIDCTCStart(FIVE_SECOND);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour =YELLOW_2;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	85 30       	cpi	r24, 0x05	; 5
    1056:	70 f3       	brcs	.-36     	; 0x1034 <APP_VOIDPedestrianMode+0x18a>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Prepare to return to the normal mode*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	62 e0       	ldi	r22, 0x02	; 2
    106c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	62 e0       	ldi	r22, 0x02	; 2
    1074:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(CAR_PORT,CAR_GREEN);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =GREEN;
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	80 93 62 00 	sts	0x0062, r24
    108e:	23 c1       	rjmp	.+582    	; 0x12d6 <APP_VOIDPedestrianMode+0x42c>
	}
	else if (GLOB_ENColour == YELLOW_1)
    1090:	80 91 62 00 	lds	r24, 0x0062
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	09 f0       	breq	.+2      	; 0x109a <APP_VOIDPedestrianMode+0x1f0>
    1098:	95 c0       	rjmp	.+298    	; 0x11c4 <APP_VOIDPedestrianMode+0x31a>
	{
		/*Pedestrian's green/yellow is off*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Pedestrian's red light is on*/
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	62 e0       	ldi	r22, 0x02	; 2
    10ae:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Car's green/red lights are off*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	62 e0       	ldi	r22, 0x02	; 2
    10be:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour=YELLOW_1;
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<5 ;LOC_U8Iterator++)
    10d8:	1c 82       	std	Y+4, r1	; 0x04
    10da:	0f c0       	rjmp	.+30     	; 0x10fa <APP_VOIDPedestrianMode+0x250>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour=YELLOW_1;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<5 ;LOC_U8Iterator++)
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	8c 83       	std	Y+4, r24	; 0x04
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	70 f3       	brcs	.-36     	; 0x10dc <APP_VOIDPedestrianMode+0x232>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Car's red light is on,Car's green/yellow light is off*/
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(CAR_PORT,CAR_RED);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour=RED;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 62 00 	sts	0x0062, r24
		/*Pedestrian's red/yellow light is off,Pedestrian's green light is on*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	62 e0       	ldi	r22, 0x02	; 2
    1122:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =YELLOW_2;
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
    1154:	1b 82       	std	Y+3, r1	; 0x03
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <APP_VOIDPedestrianMode+0x2cc>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		MTMR0_VOIDCTCStart(FIVE_SECOND);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour =YELLOW_2;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	70 f3       	brcs	.-36     	; 0x1158 <APP_VOIDPedestrianMode+0x2ae>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Prepare to return to the normal mode*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	62 e0       	ldi	r22, 0x02	; 2
    1190:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	62 e0       	ldi	r22, 0x02	; 2
    1198:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(CAR_PORT,CAR_GREEN);
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =GREEN;
    11ac:	84 e0       	ldi	r24, 0x04	; 4
    11ae:	80 93 62 00 	sts	0x0062, r24
		/*Wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
    11b2:	85 e0       	ldi	r24, 0x05	; 5
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		/*Car's green light is off*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
    11c2:	89 c0       	rjmp	.+274    	; 0x12d6 <APP_VOIDPedestrianMode+0x42c>
	}
	else if (GLOB_ENColour == YELLOW_2)
    11c4:	80 91 62 00 	lds	r24, 0x0062
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	09 f0       	breq	.+2      	; 0x11ce <APP_VOIDPedestrianMode+0x324>
    11cc:	84 c0       	rjmp	.+264    	; 0x12d6 <APP_VOIDPedestrianMode+0x42c>
	{
		/*Pedestrian's green/yellow is off*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Pedestrian's red light is on*/
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	62 e0       	ldi	r22, 0x02	; 2
    11e2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Car's green/red lights are off*/
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	62 e0       	ldi	r22, 0x02	; 2
    11f2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour=YELLOW_1;
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<5 ;LOC_U8Iterator++)
    120c:	1a 82       	std	Y+2, r1	; 0x02
    120e:	0f c0       	rjmp	.+30     	; 0x122e <APP_VOIDPedestrianMode+0x384>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour=YELLOW_1;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<5 ;LOC_U8Iterator++)
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	85 30       	cpi	r24, 0x05	; 5
    1232:	70 f3       	brcs	.-36     	; 0x1210 <APP_VOIDPedestrianMode+0x366>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Car's red light is on,Car's green/yellow light is off*/
		HLED_VOIDOFF(CAR_PORT,CAR_YELLOW);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(CAR_PORT,CAR_GREEN);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(CAR_PORT,CAR_RED);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	62 e0       	ldi	r22, 0x02	; 2
    1248:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour=RED;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	80 93 62 00 	sts	0x0062, r24
		/*Pedestrian's red/yellow light is off,Pedestrian's green light is on*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Wait for 5 seconds*/
		MTMR0_VOIDCTCStart(FIVE_SECOND);
    126a:	85 e0       	ldi	r24, 0x05	; 5
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		GLOB_ENColour =YELLOW_2;
    127a:	83 e0       	ldi	r24, 0x03	; 3
    127c:	80 93 62 00 	sts	0x0062, r24
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
    1288:	19 82       	std	Y+1, r1	; 0x01
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <APP_VOIDPedestrianMode+0x400>
		{
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	0e 94 05 06 	call	0xc0a	; 0xc0a <HLED_VOIDToggle>
			MTMR0_VOIDCTCStart(ONE_SECOND);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 67 00 	call	0xce	; 0xce <MTMR0_VOIDCTCStart>
		MTMR0_VOIDCTCStart(FIVE_SECOND);
		/*Blink both yellow lights for 5 seconds*/
		HLED_VOIDON(CAR_PORT,CAR_YELLOW);
		GLOB_ENColour =YELLOW_2;
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
		for (uint8_t LOC_U8Iterator = ZERO ; LOC_U8Iterator<FIVE_SECOND ;LOC_U8Iterator++)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	85 30       	cpi	r24, 0x05	; 5
    12ae:	70 f3       	brcs	.-36     	; 0x128c <APP_VOIDPedestrianMode+0x3e2>
			HLED_VOIDToggle(CAR_PORT,CAR_YELLOW);
			HLED_VOIDToggle(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
			MTMR0_VOIDCTCStart(ONE_SECOND);
		}
		/*Prepare to return to the normal mode*/
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
		/*Car's red light is off*/
		HLED_VOIDOFF(CAR_PORT,CAR_RED);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	62 e0       	ldi	r22, 0x02	; 2
    12cc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
		GLOB_ENColour =GREEN;
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	80 93 62 00 	sts	0x0062, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    12d6:	27 96       	adiw	r28, 0x07	; 7
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <APP_VOIDStart>:
 * Return value: EN_APPState_t - to store the state of the function
 * Description: Function to start the On-Demand Traffic Lights Control application
 ************************************************************************************/

EN_APPState_t APP_VOIDStart(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	/*Variable to store the state of the function*/
	EN_APPState_t LOC_ENState = APP_NOT_OK;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
	/*Prepare Normal Mode*/
	HLED_VOIDON(PEDESTRIAN_PORT,PEDESTRIAN_RED);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HLED_VOIDON>
	HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_GREEN);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
	HLED_VOIDOFF(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <HLED_VOIDOFF>
	/*Run the normal mode, pedestrian mode will be activated when the button is released
	 * as i configured the external interrupt INT0 on rising edge and connected the button with
	 * a pull up configuration
	 */
	APP_VOIDNormalMode();
    130e:	0e 94 b4 06 	call	0xd68	; 0xd68 <APP_VOIDNormalMode>
	LOC_ENState = APP_OK;
    1312:	19 82       	std	Y+1, r1	; 0x01
	return LOC_ENState;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
}
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <main>:

/*Inclusion of the app.h file*/
#include "APP/app.h"

int main (void)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	/*Initialize the application*/
	EN_APPState_t LOC_ENState ;
	if (APP_VOIDInit() == APP_OK)
    1328:	0e 94 46 06 	call	0xc8c	; 0xc8c <APP_VOIDInit>
    132c:	88 23       	and	r24, r24
    132e:	11 f4       	brne	.+4      	; 0x1334 <main+0x16>
	{
		LOC_ENState = APP_OK;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <main+0x1a>
	}
	else
	{
		LOC_ENState = APP_NOT_OK;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
	}


	while (1)
	{
		if(LOC_ENState == APP_OK)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	88 23       	and	r24, r24
    133c:	e9 f7       	brne	.-6      	; 0x1338 <main+0x1a>
		{
			APP_VOIDStart();
    133e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <APP_VOIDStart>
    1342:	fa cf       	rjmp	.-12     	; 0x1338 <main+0x1a>

00001344 <_exit>:
    1344:	f8 94       	cli

00001346 <__stop_program>:
    1346:	ff cf       	rjmp	.-2      	; 0x1346 <__stop_program>
